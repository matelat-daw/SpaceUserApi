// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaceUserAPI.Data;

#nullable disable

namespace SpaceUserAPI.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250409174725_SQL-Initial")]
    partial class SQLInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7866ffc8-4c6b-41af-8ebd-4649bc921419",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "1069fead-3c2e-44d5-9bd1-be4d12e2fc1e",
                            Name = "Premium",
                            NormalizedName = "PREMIUM"
                        },
                        new
                        {
                            Id = "521d237a-ce90-4d80-81a8-2ecc008c9b37",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9db23031-e530-4a2c-8cf2-c543155c7849",
                            RoleId = "521d237a-ce90-4d80-81a8-2ecc008c9b37"
                        },
                        new
                        {
                            UserId = "9a8ebfd3-7e27-4c54-894e-6fd729ea1a70",
                            RoleId = "521d237a-ce90-4d80-81a8-2ecc008c9b37"
                        },
                        new
                        {
                            UserId = "503c3a6a-b7d5-4083-abb2-bca2f7bdec5b",
                            RoleId = "521d237a-ce90-4d80-81a8-2ecc008c9b37"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SpaceUser.Models.User.SpaceUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Bday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Surname2")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9db23031-e530-4a2c-8cf2-c543155c7849",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1995, 7, 15),
                            ConcurrencyStamp = "fd33f35d-1c98-412e-9a57-629ac567c5a4",
                            Email = "ledesma.leslie@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Leslie Ann",
                            NormalizedEmail = "LEDESMA.LESLIE@GMAIL.COM",
                            NormalizedUserName = "LEDESMA.LESLIE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEvG9UvFRhYc1sLNcjdHnkDWURk4T/dYVwtwdbbtt5tKLnTez4zIsbIIq3TMLfZPA==",
                            PhoneNumber = "644388160",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/ledesma.leslie@gmail.com/Leslie.jpg",
                            SecurityStamp = "1b9e335c-7bcc-429c-ba7b-6942262e8832",
                            Surname1 = "Ledesma",
                            Surname2 = "",
                            TwoFactorEnabled = false,
                            UserName = "ledesma.leslie@gmail.com"
                        },
                        new
                        {
                            Id = "9a8ebfd3-7e27-4c54-894e-6fd729ea1a70",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(2001, 1, 3),
                            ConcurrencyStamp = "687504fc-0188-469a-80f9-1e060d085d89",
                            Email = "patrickmurphygon@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Patrick Edward",
                            NormalizedEmail = "PATRICKMURPHYGON@GMAIL.COM",
                            NormalizedUserName = "PATRICKMURPHYGON@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHBKkb7MjdjHzg+mQT99mmgz/teeHIhNLSkRvkMrzxVFC4rdnJkRACF3YXasMlMgiw==",
                            PhoneNumber = "634547833",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/patrickmurphygon@gmail.com/Patrick.jpg",
                            SecurityStamp = "96f508bd-5f18-4da2-bb16-948dc49883c7",
                            Surname1 = "Murphy",
                            Surname2 = "González",
                            TwoFactorEnabled = false,
                            UserName = "patrickmurphygon@gmail.com"
                        },
                        new
                        {
                            Id = "503c3a6a-b7d5-4083-abb2-bca2f7bdec5b",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1968, 4, 5),
                            ConcurrencyStamp = "2e78bbc1-2e0b-4d58-ae78-1571e7e0947e",
                            Email = "cesarmatelat@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "César Osvaldo",
                            NormalizedEmail = "CESARMATELAT@GMAIL.COM",
                            NormalizedUserName = "CESARMATELAT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFPC609Qr68j+0GZJb49pFVA0sSLkjzY3072fpjgnVloiDXM38H+iNiAclxm+GJEDw==",
                            PhoneNumber = "664774821",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/cesarmatelat@gmail.com/profile.jpg",
                            SecurityStamp = "6fe03dd8-03d8-44fc-928c-8182fc2f4659",
                            Surname1 = "Matelat",
                            Surname2 = "Borneo",
                            TwoFactorEnabled = false,
                            UserName = "cesarmatelat@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SpaceUser.Models.User.SpaceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SpaceUser.Models.User.SpaceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceUser.Models.User.SpaceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SpaceUser.Models.User.SpaceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
