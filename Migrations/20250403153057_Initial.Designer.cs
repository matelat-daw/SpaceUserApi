// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaceUserAPI.Data;

#nullable disable

namespace SpaceUserAPI.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250403153057_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "42dd564e-b0b2-4a16-93ce-2f18e7b37444",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "e101e06f-e826-49fa-ab81-978c70ec0ab3",
                            Name = "Premium",
                            NormalizedName = "PREMIUM"
                        },
                        new
                        {
                            Id = "3170084a-5c8b-4f56-94a3-3256fe1e9f54",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d1936bb7-a8ed-44fd-bef7-68da773b47c8",
                            RoleId = "3170084a-5c8b-4f56-94a3-3256fe1e9f54"
                        },
                        new
                        {
                            UserId = "e8c009e9-980a-49a2-8ec8-087b5b8735ce",
                            RoleId = "3170084a-5c8b-4f56-94a3-3256fe1e9f54"
                        },
                        new
                        {
                            UserId = "4de4a52c-0df1-495d-8977-4e3f25cbd164",
                            RoleId = "3170084a-5c8b-4f56-94a3-3256fe1e9f54"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SpaceUser.Models.User.SpaceUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Bday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Surname2")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d1936bb7-a8ed-44fd-bef7-68da773b47c8",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1995, 7, 15),
                            ConcurrencyStamp = "6db0368e-e7d8-4c3f-be00-d803da357a64",
                            Email = "ledesma.leslie@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Leslie Ann",
                            NormalizedEmail = "LEDESMA.LESLIE@GMAIL.COM",
                            NormalizedUserName = "LEDESMA.LESLIE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWbSYw0z0xf1IjINyadIC5vWpovSOu2vsqBkI8u1yEtUSk2SchYFrYNuRg7rcfoog==",
                            PhoneNumber = "644388160",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/ledesma.leslie@gmail.com/Leslie.jpg",
                            SecurityStamp = "05258f38-9483-49e8-a95c-d982534bc3ad",
                            Surname1 = "Ledesma",
                            Surname2 = "",
                            TwoFactorEnabled = false,
                            UserName = "ledesma.leslie@gmail.com"
                        },
                        new
                        {
                            Id = "e8c009e9-980a-49a2-8ec8-087b5b8735ce",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(2001, 1, 3),
                            ConcurrencyStamp = "f6c54ee8-e706-4ac5-b64c-88c932acd286",
                            Email = "patrickmurphygon@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Patrick Edward",
                            NormalizedEmail = "PATRICKMURPHYGON@GMAIL.COM",
                            NormalizedUserName = "PATRICKMURPHYGON@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIr+Hq/VfBXQLe6yF9sKup/ElHEYFl3eoR0Jt12ZKSnCJMqdHlvKeXrtJPtAMjOVZQ==",
                            PhoneNumber = "634547833",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/patrickmurphygon@gmail.com/Patrick.jpg",
                            SecurityStamp = "1227ac7b-423b-4c36-9837-95e549384689",
                            Surname1 = "Murphy",
                            Surname2 = "González",
                            TwoFactorEnabled = false,
                            UserName = "patrickmurphygon@gmail.com"
                        },
                        new
                        {
                            Id = "4de4a52c-0df1-495d-8977-4e3f25cbd164",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1968, 4, 5),
                            ConcurrencyStamp = "32b20034-ea04-4439-90be-7a4c6b89da75",
                            Email = "cesarmatelat@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "César Osvaldo",
                            NormalizedEmail = "CESARMATELAT@GMAIL.COM",
                            NormalizedUserName = "CESARMATELAT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMfMPNDrB80M3iIrPK+uxmvZG/9AnTJA6FM5nDptAN5QsxW2Ou6s76a7PlVgfGFpzg==",
                            PhoneNumber = "664774821",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/cesarmatelat@gmail.com/profile.jpg",
                            SecurityStamp = "c8d13bc7-1559-4a0d-864f-a6f0bff77579",
                            Surname1 = "Matelat",
                            Surname2 = "Borneo",
                            TwoFactorEnabled = false,
                            UserName = "cesarmatelat@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SpaceUser.Models.User.SpaceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SpaceUser.Models.User.SpaceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaceUser.Models.User.SpaceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SpaceUser.Models.User.SpaceUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
